{"version":3,"sources":["../src/util.js"],"names":["datetime","log","err","values","ts","Date","now","date","getDate","slice","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","message","args","msgCol","argsCol","DEBUG","trace","get","callerFile","getFileName","replace","dirname","__dirname","callerFileLine","getLineNumber","console","cyan","grey","obj","Array","isArray","Object","keys","map","key"],"mappings":";;;;;;;;QAsBgBA,Q,GAAAA,Q;QA0BAC,G,GAAAA,G;QAoBAC,G,GAAAA,G;QAQAC,M,GAAAA,M;;AA5EhB;;;;AACA;;;;AACA;;AACA;;;;;;;;AACA;;;;;;;;;AASA;;;;;;;;;AASO,SAASH,QAAT,CAAmBI,EAAnB,EAAuB;AAC5B,MAAIA,MAAM,IAAV,EAAgB;AACdA,SAAKC,KAAKC,GAAL,EAAL;AACD;;AAED,MAAMC,OAAO,IAAIF,IAAJ,CAASD,EAAT,CAAb;;AAEA,SAAO,CAAC,MAAMG,KAAKC,OAAL,EAAP,EAAuBC,KAAvB,CAA6B,CAAC,CAA9B,IAAmC,GAAnC,GACA,CAAC,OAAOF,KAAKG,QAAL,KAAkB,CAAzB,CAAD,EAA8BD,KAA9B,CAAoC,CAAC,CAArC,CADA,GAC0C,GAD1C,GAEAF,KAAKI,WAAL,EAFA,GAEqB,GAFrB,GAGA,CAAC,MAAMJ,KAAKK,QAAL,EAAP,EAAwBH,KAAxB,CAA8B,CAAC,CAA/B,CAHA,GAGoC,GAHpC,GAIA,CAAC,MAAMF,KAAKM,UAAL,EAAP,EAA0BJ,KAA1B,CAAgC,CAAC,CAAjC,CAJA,GAIsC,GAJtC,GAKA,CAAC,MAAMF,KAAKO,UAAL,EAAP,EAA0BL,KAA1B,CAAgC,CAAC,CAAjC,CALA,GAKsC,GALtC,GAMAF,KAAKQ,eAAL,EANP;AAOD;;AAED;;;;;;;;;;AAUO,SAASd,GAAT,CAAce,OAAd,EAAsE;AAAA,MAA/CC,IAA+C,uEAAxC,EAAwC;AAAA,MAApCC,MAAoC,uEAA3B,MAA2B;AAAA,MAAnBC,OAAmB,uEAAT,OAAS;;AAC3E,MAAI,SAAOC,KAAX,EAAkB;AAChB,QAAMC,QAAQ,qBAAWC,GAAX,EAAd;AACA,QAAIC,aAAaF,MAAO,CAAP,EAAWG,WAAX,GAAyBC,OAAzB,CAAiC,eAAKC,OAAL,CAAaC,SAAb,IAA0B,GAA3D,EAAgE,EAAhE,CAAjB;AACA,QAAIC,iBAAiBP,MAAO,CAAP,EAAWQ,aAAX,EAArB;;AAEAC,YAAQ7B,GAAR,CACE,gBAAM8B,IAAN,CAAW,OAAO1B,KAAKC,GAAL,EAAP,GAAoB,GAApB,GAA0B,gBAAM0B,IAAN,CAAWT,aAAa,GAAb,GAAmBK,cAA9B,CAA1B,GAA0E,IAArF,CADF,EAEE,gBAAOV,MAAP,EAAgBF,OAAhB,CAFF,EAGE,gBAAOG,OAAP,4CAAoBF,IAApB,EAHF;AAKD;AACF;;AAED;;;;;;AAMO,SAASf,GAAT,CAAcc,OAAd,EAAkC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AACvChB,MAAIe,OAAJ,EAAaC,IAAb,EAAmB,KAAnB;AACD;;AAED;;;;AAIO,SAASd,MAAT,CAAiB8B,GAAjB,EAAsB;AAC3B,MAAI,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAnB,EAA6B,OAAO,EAAP;AAC7B,MAAIC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB,OAAOA,IAAIxB,KAAJ,EAAP;;AAExB,SAAO2B,OAAOC,IAAP,CAAYJ,GAAZ,EAAiBK,GAAjB,CAAqB;AAAA,WAAOL,IAAKM,GAAL,CAAP;AAAA,GAArB,CAAP;AACD","file":"util.js","sourcesContent":["import path from 'path'\nimport chalk from 'chalk'\nimport { config } from './'\nimport stackTrace from 'stack-trace'\n/**\n * Library utils.\n *\n * @package rxjs-postgres\n * @author Vladimir Vershinin\n * @license MIT\n * @copyright (c) 2016, Vladimir Vershinin\n */\n\n/**\n * Formats timestamp as Date/Time string in form of DD.MM.YYYY HH:mm:ss.\n *\n * @param {number} [ts] UTC timestamp.\n *\n * @returns {string} Return UTC Date/Time string.\n *\n * @private\n */\nexport function datetime (ts) {\n  if (ts == null) {\n    ts = Date.now()\n  }\n\n  const date = new Date(ts)\n\n  return ('0' + date.getDate()).slice(-2) + '.' +\n         ('0' + (date.getMonth() + 1)).slice(-2) + '.' +\n         date.getFullYear() + ' ' +\n         ('0' + date.getHours()).slice(-2) + ':' +\n         ('0' + date.getMinutes()).slice(-2) + ':' +\n         ('0' + date.getSeconds()).slice(-2) + '.' +\n         date.getMilliseconds()\n}\n\n/**\n * Logs to STDOUT with simple formatting.\n *\n * @param {string} message\n * @param {Array} [args]\n * @param {string} [msgCol=blue]\n * @param {string} [argsCol=white]\n *\n * @private\n */\nexport function log (message, args = [], msgCol = 'blue', argsCol = 'white') {\n  if (config.DEBUG) {\n    const trace = stackTrace.get()\n    let callerFile = trace[ 1 ].getFileName().replace(path.dirname(__dirname) + '/', '')\n    let callerFileLine = trace[ 1 ].getLineNumber()\n\n    console.log(\n      chalk.cyan('[ ' + Date.now() + ' ' + chalk.grey(callerFile + ':' + callerFileLine) + ' ]'),\n      chalk[ msgCol ](message),\n      chalk[ argsCol ](...args)\n    )\n  }\n}\n\n/**\n * @param message\n * @param args\n *\n * @private\n */\nexport function err (message, args = []) {\n  log(message, args, 'red')\n}\n\n/**\n * @param {Object} obj\n * @return {Array}\n */\nexport function values (obj) {\n  if (typeof obj !== 'object') return []\n  if (Array.isArray(obj)) return obj.slice()\n\n  return Object.keys(obj).map(key => obj[ key ])\n}\n"]}