{"version":3,"sources":["../../src/adapters/RxClient.js"],"names":["Rx","util","RxClient","client","Client","_client","_tlevel","_disposed","_connectSource","undefined","release","connect","Observable","fromNodeCallback","do","log","map","shareReplay","end","queryText","values","query","flatMap","force","source","connection","stream","readyState"],"mappings":"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","file":"RxClient.js","sourcesContent":["import assert from 'assert';\nimport pg from 'pg';\nimport * as Rx from 'rx';\nimport { RxClientError } from '../errors';\nimport * as util from '../util';\n\n/**\n * Standalone RxJs adapter for `pg.Client`.\n */\nexport default class RxClient {\n    /**\n     * @param {pg.Client} client\n     */\n    constructor(client) {\n        if (!(client instanceof pg.Client)) {\n            throw new RxClientError('Client must be instance of pg.Client class');\n        }\n\n        /**\n         * @type {pg.Client}\n         * @private\n         */\n        this._client = client;\n        /**\n         * @type {number}\n         * @private\n         */\n        this._tlevel = 0;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._disposed = false;\n\n        /**\n         * @type {Rx.Observable}\n         * @private\n         */\n        this._connectSource = undefined;\n    }\n\n    /**\n     * @type {pg.Client}\n     */\n    get client() {\n        return this._client;\n    }\n\n    /**\n     * @type {number}\n     */\n    get tlevel() {\n        return this._tlevel;\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    get connected() {\n        return this._client.connection.stream.readyState === 'open';\n    }\n\n    release() {\n        typeof this._client.release === 'function' && this._client.release();\n    }\n\n    dispose() {\n        if (!this._disposed) {\n            this.release();\n            this._disposed = true;\n        }\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    connect() {\n        const connect = Rx.Observable.fromNodeCallback(this._client.connect, this._client);\n\n        if (!this._connectSource) {\n            this._connectSource = connect()\n                .do(() => util.log('connect'))\n                .map(() => this)\n                .shareReplay(1);\n        }\n\n        return this._connectSource;\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    end() {\n        const end = Rx.Observable.fromNodeCallback(this._client.end, this._client);\n\n        return end()\n            .do(() => {\n                this._connectSource = undefined;\n\n                util.log('close');\n            })\n            .map(() => this);\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Rx.Observable<Object>}\n     */\n    query(queryText, values) {\n        const query = Rx.Observable.fromNodeCallback(this._client.query, this._client);\n\n        return this.connect()\n            .flatMap(() => query(queryText, values))\n            .do(() => util.log('execute query', queryText));\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    begin() {\n        assert(this._tlevel >= 0, 'Current transaction level >= 0');\n\n        let query;\n\n        if (this._tlevel === 0) {\n            query = 'begin';\n        } else {\n            query = `savepoint point_${this._tlevel}`;\n        }\n\n        return this.query(query)\n            .do(() => {\n                ++this._tlevel;\n\n                util.log('begin transaction', this._tlevel);\n            })\n            .map(() => this);\n    }\n\n    /**\n     * @param {boolean} [force] Commit transaction with all savepoints.\n     * @return {Rx.Observable<RxClient>}\n     * @throws {RxClientError}\n     */\n    commit(force) {\n        assert(this._tlevel >= 0, 'Current transaction level >= 0');\n\n        if (this._tlevel === 0) {\n            throw new RxClientError('The transaction is not open on the client');\n        }\n\n        /** @type {Rx.Observable} */\n        let source;\n\n        if (this._tlevel === 1 || force) {\n            source = this.query('commit')\n                .do(() => {\n                    util.log(`commit ${force ? '(force)' : ''} transaction`, this._tlevel);\n\n                    this._tlevel = 0;\n                });\n        } else {\n            source = this.query(`release savepoint point_${this._tlevel - 1}`)\n                .do(() => {\n                    util.log('commit transaction', this._tlevel);\n\n                    --this._tlevel;\n                });\n        }\n\n        return source.map(() => this);\n    }\n\n    /**\n     * @param {boolean} [force] Rollback transaction with all savepoints.\n     * @return {Rx.Observable<RxClient>}\n     * @throws {RxClientError}\n     */\n    rollback(force) {\n        assert(this._tlevel >= 0, 'Current transaction level >= 0');\n\n        if (this._tlevel === 0) {\n            throw new RxClientError('The transaction is not open on the client');\n        }\n\n        /** @type {Rx.Observable} */\n        let source;\n\n        if (this._tlevel === 1 || force) {\n            source = this.query('rollback')\n                .do(() => {\n                    util.log(`rollback ${force ? '(force)' : ''} transaction`, this._tlevel);\n\n                    this._tlevel = 0;\n                });\n        } else {\n            source = this.query(`rollback to savepoint point_${this._tlevel - 1}`)\n                .do(() => {\n                    util.log('rollback transaction', this._tlevel);\n\n                    --this._tlevel;\n                });\n        }\n\n        return source.map(() => this);\n    }\n}\n"]}