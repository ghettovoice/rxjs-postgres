{"version":3,"sources":["../../src/adapters/RxClient.js"],"names":["util","RxClient","client","Client","_client","_tlevel","release","connected","Observable","of","connect","bindNodeCallback","do","log","end","queryText","values","flatMap","query","connection","stream","readyState"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;IAAYA,I;;;;;;;;AAEZ;;;IAGqBC,Q;AACjB;;;AAGA,sBAAYC,MAAZ,EAAoB;AAAA;;AAChB,YAAI,EAAEA,kBAAkB,aAAGC,MAAvB,CAAJ,EAAoC;AAChC,kBAAM,0BAAkB,yCAAlB,CAAN;AACH;;AAED;;;;AAIA,aAAKC,OAAL,GAAeF,MAAf;AACA;;;;AAIA,aAAKG,OAAL,GAAe,CAAf;AACH;;AAED;;;;;;;;;AAqBA;;;kCAGU;AACN,mBAAO,KAAKD,OAAL,CAAaE,OAApB,KAAgC,UAAhC,IAA8C,KAAKF,OAAL,CAAaE,OAAb,EAA9C;AACA,iBAAKD,OAAL,GAAe,CAAf;AACH;;AAED;;;;;;kCAGU;AAAA;AAAA;;AACN,gBAAI,KAAKE,SAAT,EAAoB;AAChB,uBAAO,eAAGC,UAAH,CAAcC,EAAd,CAAiB,IAAjB,CAAP;AACH;;AAED,gBAAMC,UAAU,eAAGF,UAAH,CAAcG,gBAAd,CAAiC,iBAAKP,OAAL,EAAaM,OAA9C,iBAAuD;AAAA;AAAA,aAAvD,CAAhB;;AAEA,mBAAOA,UAAUE,EAAV,CAAa;AAAA,uBAAMZ,KAAKa,GAAL,CAAS,4BAAT,CAAN;AAAA,aAAb,CAAP;AACH;;AAED;;;;;;+BAGO;AACH,mBAAO,KAAKH,OAAL,EAAP;AACH;;AAED;;;;;;8BAGM;AAAA;AAAA;;AACF,gBAAI,CAAC,KAAKH,SAAV,EAAqB;AACjB,uBAAO,eAAGC,UAAH,CAAcC,EAAd,CAAiB,IAAjB,CAAP;AACH;;AAED,gBAAMK,MAAM,eAAGN,UAAH,CAAcG,gBAAd,CAAiC,kBAAKP,OAAL,EAAaU,GAA9C,kBAAmD;AAAA;AAAA,aAAnD,CAAZ;;AAEA,mBAAOA,MAAMF,EAAN,CAAS,YAAM;AAClB,uBAAKP,OAAL,GAAe,CAAf;AACAL,qBAAKa,GAAL,CAAS,wBAAT;AACH,aAHM,CAAP;AAIH;;AAED;;;;;;gCAGQ;AACJ,mBAAO,KAAKC,GAAL,EAAP;AACH;;AAED;;;;;;;;8BAKMC,S,EAAWC,M,EAAQ;AAAA;;AACrB,mBAAO,KAAKN,OAAL,GACFO,OADE,CACM,YAAM;AAAA;;AACX,oBAAMC,QAAQ,eAAGV,UAAH,CAAcG,gBAAd,CAAiC,oBAAKP,OAAL,EAAac,KAA9C,iBAAd;;AAEA,uBAAOA,MAAMH,SAAN,EAAiBC,MAAjB,CAAP;AACH,aALE,EAMFJ,EANE,CAMC;AAAA,uBAAMZ,KAAKa,GAAL,CAAS,0BAAT,EAAqCE,SAArC,CAAN;AAAA,aa;AACT,mBAAO,KAAKX,OAAZ;AACH;;AAED;;;;;;4BAGa;AACT,mBAAO,KAAKC,OAAZ;AACH;;AAED;;;;;;4BAGgB;AACZ,mBAAO,KAAKD,OAAL,CAAae,UAAb,CAAwBC,MAAxB,CAA+BC,UAA/B,KAA8C,MAArD;AACH;;;;;;kBAxCgBpB,Q","file":"RxClient.js","sourcesContent":["import pg from 'pg';\nimport Rx from 'rxjs';\nimport { RxClientError } from '../errors';\nimport * as util from '../util';\n\n/**\n * Standalone RxJs adapter for `pg.Client`.\n */\nexport default class RxClient {\n    /**\n     * @param {Client} client\n     */\n    constructor(client) {\n        if (!(client instanceof pg.Client)) {\n            throw new RxClientError('Client must be instance of Client class');\n        }\n\n        /**\n         * @type {Client}\n         * @private\n         */\n        this._client = client;\n        /**\n         * @type {number}\n         * @private\n         */\n        this._tlevel = 0;\n    }\n\n    /**\n     * @type {Client}\n     */\n    get client() {\n        return this._client;\n    }\n\n    /**\n     * @type {number}\n     */\n    get tlevel() {\n        return this._tlevel;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    get connected() {\n        return this._client.connection.stream.readyState === 'open';\n    }\n\n    /**\n     * Releases client acquired from pool\n     */\n    release() {\n        typeof this._client.release === 'function' && this._client.release();\n        this._tlevel = 0;\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    connect() {\n        if (this.connected) {\n            return Rx.Observable.of(this);\n        }\n\n        const connect = Rx.Observable.bindNodeCallback(::this._client.connect, () => this);\n\n        return connect().do(() => util.log('RxClient: client connected'));\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    open() {\n        return this.connect();\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    end() {\n        if (!this.connected) {\n            return Rx.Observable.of(this);\n        }\n\n        const end = Rx.Observable.bindNodeCallback(::this._client.end, () => this);\n\n        return end().do(() => {\n            this._tlevel = 0;\n            util.log('RxClient: client ended');\n        });\n    }\n\n    /**\n     * @return {Observable.<RxClient>}\n     */\n    close() {\n        return this.end();\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Observable<Object>}\n     */\n    query(queryText, values) {\n        return this.connect()\n            .flatMap(() => {\n                const query = Rx.Observable.bindNodeCallback(::this._client.query);\n\n                return query(queryText, values);\n            })\n            .do(() => util.log('RxClient: query executed', queryText));\n    }\n\n    // /**\n    //  * @return {Rx.Observable<RxClient>}\n    //  */\n    // begin() {\n    //     assert(this._tlevel >= 0, 'Current transaction level >= 0');\n    //\n    //     util.log('begin transaction');\n    //      // todo doOnError => reset tlevel\n    //     this._transactionSource = (this._transactionSource || Rx.Observable.return(null))\n    //         .flatMap(() => {\n    //             let query;\n    //\n    //             if (this._tlevel === 0) {\n    //                 query = 'begin';\n    //             } else {\n    //                 query = `savepoint point_${this._tlevel}`;\n    //             }\n    //\n    //             return this.query(query);\n    //         })\n    //         .do(() => {\n    //             ++this._tlevel;\n    //\n    //             util.log('transaction started', this._tlevel);\n    //         })\n    //         .map(() => this)\n    //         .shareReplay(1);\n    //\n    //     return this._transactionSource;\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Commit transaction with all savepoints.\n    //  * @return {Rx.Observable<RxClient>}\n    //  * @throws {RxClientError}\n    //  */\n    // commit(force) {\n    //     assert(this._tlevel >= 0, 'Current transaction level >= 0');\n    //\n    //     if (!this._transactionSource) {\n    //         throw new RxClientError('The transaction is not open on the client');\n    //     }\n    //\n    //     util.log('commit transaction');\n    //\n    //     this._transactionSource = this._transactionSource.flatMap(() => {\n    //         if (this._tlevel === 0) {\n    //             throw new RxClientError('The transaction is not open on the client');\n    //         }\n    //\n    //         /** @type {Rx.Observable} */\n    //         let source;\n    //\n    //         if (this._tlevel === 1 || force) {\n    //             source = this.query('commit')\n    //                 .do(() => {\n    //                     util.log(`transaction committed ${force ? '(force)' : ''}`, this._tlevel);\n    //\n    //                     this._tlevel = 0;\n    //                     this._transactionSource = undefined;\n    //                 });\n    //         } else {\n    //             source = this.query(`release savepoint point_${this._tlevel - 1}`)\n    //                 .do(() => {\n    //                     util.log('transaction committed', this._tlevel);\n    //\n    //                     --this._tlevel;\n    //                 });\n    //         }\n    //\n    //         return source;\n    //     }).map(() => this)\n    //         .shareReplay(1);\n    //\n    //\n    //     return this._transactionSource;\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Rollback transaction with all savepoints.\n    //  * @return {Rx.Observable<RxClient>}\n    //  * @throws {RxClientError}\n    //  */\n    // rollback(force) {\n    //     assert(this._tlevel >= 0, 'Current transaction level >= 0');\n    //\n    //     if (!this._transactionSource) {\n    //         throw new RxClientError('The transaction is not open on the client');\n    //     }\n    //\n    //     util.log('rollback transaction');\n    //\n    //     this._transactionSource = this._transactionSource.flatMap(() => {\n    //         if (this._tlevel === 0) {\n    //             throw new RxClientError('The transaction is not open on the client');\n    //         }\n    //\n    //         /** @type {Rx.Observable} */\n    //         let source;\n    //\n    //         if (this._tlevel === 1 || force) {\n    //             source = this.query('rollback')\n    //                 .do(() => {\n    //                     util.log(`transaction rolled back ${force ? '(force)' : ''}`, this._tlevel);\n    //\n    //                     this._tlevel = 0;\n    //                     this._transactionSource = undefined;\n    //                 });\n    //         } else {\n    //             source = this.query(`rollback to savepoint point_${this._tlevel - 1}`)\n    //                 .do(() => {\n    //                     util.log('transaction rolled back', this._tlevel);\n    //\n    //                     --this._tlevel;\n    //                 });\n    //         }\n    //\n    //         return source;\n    //     }).map(() => this)\n    //         .shareReplay(1);\n    //\n    //     return this._transactionSource;\n    // }\n}\n"]}