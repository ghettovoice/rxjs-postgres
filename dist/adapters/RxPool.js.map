{"version":3,"sources":["../../src/adapters/RxPool.js"],"names":["util","RxPool","pool","Pool","_pool","Observable","fromPromise","connect","flatMap","rxClient","client","release","err","log","mapTo","do","end","map","queryText","values","query"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,I;;;;;;;;AAEZ;;;IAGqBC,M;AACnB;;;AAGA,kBAAaC,IAAb,EAAmB;AAAA;;AACjB,QAAI,EAAEA,gBAAgB,aAAGC,IAArB,CAAJ,EAAgC;AAC9B,YAAM,wBAAgB,qCAAhB,CAAN;AACD;;AAED;;;;AAIA,SAAKC,KAAL,GAAaF,IAAb;AACD;;AAED;;;;;;;;;AAOA;;;;;;;;;;;8BAWW;AACT,aAAO,eAAGG,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWG,OAAX,EAA1B,EACJC,OADI,CACI,kBAAU;AACjB,YAAMC,WAAW,uBAAaC,MAAb,CAAjB;;AAEAD,iBAASE,OAAT,GAAmB,UAAUC,GAAV,EAAe;AAChCZ,eAAKa,GAAL,CAAS,mBAAT;;AAEA,iBAAOJ,SAASE,OAAhB;AACAD,iBAAOC,OAAP,CAAeC,GAAf;AACD,SALD;;AAOA,eAAOH,SAASF,OAAT,GAAmBO,KAAnB,CAAyBL,QAAzB,CAAP;AACD,OAZI,EAaJM,EAbI,CAaD;AAAA,eAAMf,KAAKa,GAAL,CAAS,0BAAT,CAAN;AAAA,OAbC,CAAP;AAcD;;AAED;;;;;;;;;2BAMQ;AACN,aAAO,KAAKN,OAAL,EAAP;AACD;;AAED;;;;;;0BAGO;AAAA;;AACL,aAAO,eAAGF,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWY,GAAX,EAA1B,EACJC,GADI,CACA;AAAA;AAAA,OADA,EAEJF,EAFI,CAED;AAAA,eAAMf,KAAKa,GAAL,CAAS,oBAAT,CAAN;AAAA,OAFC,CAAP;AAGD;;AAED;;;;;;;;0BAKOK,S,EAAWC,M,EAAQ;AACxB,aAAO,eAAGd,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWgB,KAAX,CAAiBF,SAAjB,EAA4BC,MAA5B,CAA1B,EACJJ,EADI,CACD;AAAA,eAAMf,KAAKa,GAAL,CAAS,wBAAT,CAAN;AAAA,OADC,CAAP;AAED;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;wBAhHY;AACV,aAAO,KAAKT,KAAZ;AACD;;;;;;kBArBkBH,M","file":"RxPool.js","sourcesContent":["import pg from 'pg'\nimport Rx from 'rxjs'\nimport RxClient from './RxClient'\nimport { RxPoolError } from '../errors'\nimport * as util from '../util'\n\n/**\n * Standalone RxJs adapter for `pg.Pool`.\n */\nexport default class RxPool {\n  /**\n   * @param {Pool} pool\n   */\n  constructor (pool) {\n    if (!(pool instanceof pg.Pool)) {\n      throw new RxPoolError('Pool must be instance of Pool class')\n    }\n\n    /**\n     * @type {Pool}\n     * @private\n     */\n    this._pool = pool\n  }\n\n  /**\n   * @return {Pool}\n   */\n  get pool () {\n    return this._pool\n  }\n\n  /**\n   * Acquires {@link Client} from the {@link Pool} and wraps it into {@link RxClient} adapter.\n   *\n   * @alias {@link RxPool#take}\n   *\n   * @see {@link RxPool#end}\n   * @see {@link RxClient}\n   *\n   * @return {Observable<RxClient>} Returns single element {@link Observable} sequence\n   *    of the connected {@link RxClient}\n   */\n  connect () {\n    return Rx.Observable.fromPromise(this._pool.connect())\n      .flatMap(client => {\n        const rxClient = new RxClient(client)\n\n        rxClient.release = function (err) {\n          util.log('RxClient: release')\n\n          delete rxClient.release\n          client.release(err)\n        }\n\n        return rxClient.connect().mapTo(rxClient)\n      })\n      .do(() => util.log('RxPool: client connected'))\n  }\n\n  /**\n   * Alias of the {@link RxPool#connect} method.\n   *\n   * @return {Observable<RxClient>} Returns single element {@link Observable} sequence\n   *    of the connected {@link RxClient}.\n   */\n  take () {\n    return this.connect()\n  }\n\n  /**\n   * @return {Observable<RxPool>}\n   */\n  end () {\n    return Rx.Observable.fromPromise(this._pool.end())\n      .map(() => this)\n      .do(() => util.log('RxPool: pool ended'))\n  }\n\n  /**\n   * @param {string} queryText\n   * @param {Array} [values]\n   * @return {Rx.Observable<Object>}\n   */\n  query (queryText, values) {\n    return Rx.Observable.fromPromise(this._pool.query(queryText, values))\n      .do(() => util.log('RxPool: query executed'))\n  }\n\n  // /**\n  //  * @return {Rx.Observable<RxPool>}\n  //  */\n  // begin() {\n  //     this._tclientSource = (this._tclientSource || this.connect())\n  //         .flatMap(rxClient => rxClient.begin())\n  //         .shareReplay(1);\n  //\n  //     return this._tclientSource.map(() => this);\n  // }\n  //\n  // /**\n  //  * @param {boolean} [force] Commit transaction with all savepoints.\n  //  * @return {Rx.Observable<RxPool>}\n  //  * @throws {RxPoolError}\n  //  */\n  // commit(force) {\n  //     if (!this._tclientSource) {\n  //         throw new RxPoolError('Client with open transaction does not exists');\n  //     }\n  //\n  //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.commit(force))\n  //         .do(rxClient => {\n  //             if (rxClient.txLevel === 0) {\n  //                 this._tclientSource = undefined;\n  //             }\n  //         })\n  //         .shareReplay(1);\n  //\n  //     return this._tclientSource.map(() => this);\n  // }\n  //\n  // /**\n  //  * @param {boolean} [force] Rollback transaction with all savepoints.\n  //  * @return {Rx.Observable<RxPool>}\n  //  * @throws {RxPoolError}\n  //  */\n  // rollback(force) {\n  //     if (!this._tclientSource) {\n  //         throw new RxPoolError('Client with open transaction does not exists');\n  //     }\n  //\n  //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.rollback(force))\n  //         .do(rxClient => {\n  //             if (rxClient.txLevel === 0) {\n  //                 this._tclientSource = undefined;\n  //             }\n  //         })\n  //         .shareReplay(1);\n  //\n  //     return this._tclientSource.map(() => this);\n  // }\n}\n"]}