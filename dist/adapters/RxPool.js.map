{"version":3,"sources":["../../src/adapters/RxPool.js"],"names":["Rx","RxPool","pool","Pool","_pool","_tclientSource","undefined","Observable","fromPromise","connect","map","client","end","queryText","values","query","shareReplay","flatMap","rxClient","begin","force","commit","do","tlevel","release","rollback"],"mappings":";;;;;;;;AAAA;;;;AACA;;IAAYA,E;;AACZ;;;;AACA;;;;;;;;AAEA;;;IAGqBC,M;AACjB;;;AAGA,oBAAYC,IAAZ,EAAkB;AAAA;;AACd,YAAI,EAAEA,gBAAgB,aAAGC,IAArB,CAAJ,EAAgC;AAC5B,kBAAM,wBAAgB,wCAAhB,CAAN;AACH;;AAED;;;;AAIA,aAAKC,KAAL,GAAaF,IAAb;AACA;;;;AAIA,aAAKG,cAAL,GAAsBC,SAAtB;AACH;;AAED;;;;;;;;;AAOA;;;kCAGU;AACN,mBAAON,GAAGO,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWK,OAAX,EAA1B,EACFC,GADE,CACE;AAAA,uBAAU,uBAAaC,MAAb,CAAV;AAAA,aADF,CAAP;AAEH;;AAED;;;;;;+BAGO;AACH,mBAAO,KAAKF,OAAL,EAAP;AACH;;AAED;;;;;;8BAGM;AAAA;;AACF,mBAAOT,GAAGO,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWQ,GAAX,EAA1B,EACFF,GADE,CACE;AAAA;AAAA,aADF,CAAP;AAEH;;AAED;;;;;;;;8BAKMG,S,EAAWC,M,EAAQ;AACrB,mBAAOd,GAAGO,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWW,KAAX,CAAiBF,SAAjB,EAA4BC,MAA5B,CAA1B,CAAP;AACH;;AAED;;;;;;gCAGQ;AAAA;;AACJ,gBAAI,CAAC,KAAKT,cAAV,EAA0B;AACtB,qBAAKA,cAAL,GAAsB,KAAKI,OAAL,GAAeO,WAAf,CAA2B,CAA3B,CAAtB;AACH;;AAED,mBAAO,KAAKX,cAAL,CAAoBY,OAApB,CACH;AAAA,uBAAYC,SAASC,KAAT,EAAZ;AAAA,aADG,EAEH;AAAA;AAAA,aAFG,CAAP;AAIH;;AAED;;;;;;;;+BAKOC,K,EAAO;AAAA;;AACV,gBAAI,CAAC,KAAKf,cAAV,EAA0B;AACtB,sBAAM,wBAAgB,8CAAhB,CAAN;AACH;AACD;AACA,mBAAO,KAAKA,cAAL,CAAoBY,OAApB,CAA4B;AAAA,uBAAYC,SAASG,MAAT,CAAgBD,KAAhB,CAAZ;AAAA,aAA5B,EACFE,EADE,CACC,oBAAY;AACZ,oBAAI,CAACJ,SAASK,MAAd,EAAsB;AAClBL,6BAASM,OAAT;AACA,2BAAKnB,cAAL,GAAsB,IAAtB;AACH;AACJ,aANE,CAAP;AAOH;;AAED;;;;;;;;iCAKSe,K,EAAO;AAAA;;AACZ,gBAAI,CAAC,KAAKf,cAAV,EAA0B;AACtB,sBAAM,wBAAgB,8CAAhB,CAAN;AACH;AACD;AACA,mBAAO,KAAKA,cAAL,CAAoBY,OAApB,CACH;AAAA,uBAAYC,SAASO,QAAT,CAAkBL,KAAlB,CAAZ;AAAA,aADG,EAEH;AAAA;AAAA,aAFG,CAAP;AAIA;AACH;;;4BApFU;AACP,mBAAO,KAAKhB,KAAZ;AACH;;;;;;kBA1BgBH,M","file":"RxPool.js","sourcesContent":["import pg from 'pg';\nimport * as Rx from 'rx';\nimport RxClient from './RxClient';\nimport { RxPoolError } from '../errors';\n\n/**\n * Standalone RxJs adapter for `pg.Pool`.\n */\nexport default class RxPool {\n    /**\n     * @param {pg.Pool} pool\n     */\n    constructor(pool) {\n        if (!(pool instanceof pg.Pool)) {\n            throw new RxPoolError('Pool must be instance of pg.Pool class');\n        }\n\n        /**\n         * @type {pg.Pool}\n         * @private\n         */\n        this._pool = pool;\n        /**\n         * @type {Rx.ConnectableObservable<RxClient>}\n         * @private\n         */\n        this._tclientSource = undefined;\n    }\n\n    /**\n     * @return {pg.Pool}\n     */\n    get pool() {\n        return this._pool;\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    connect() {\n        return Rx.Observable.fromPromise(this._pool.connect())\n            .map(client => new RxClient(client));\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    take() {\n        return this.connect();\n    }\n\n    /**\n     * @return {Rx.Observable<RxPool>}\n     */\n    end() {\n        return Rx.Observable.fromPromise(this._pool.end())\n            .map(() => this);\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Rx.Observable<Object>}\n     */\n    query(queryText, values) {\n        return Rx.Observable.fromPromise(this._pool.query(queryText, values));\n    }\n\n    /**\n     * @return {Rx.Observable<RxPool>}\n     */\n    begin() {\n        if (!this._tclientSource) {\n            this._tclientSource = this.connect().shareReplay(1);\n        }\n\n        return this._tclientSource.flatMap(\n            rxClient => rxClient.begin(),\n            () => this\n        );\n    }\n\n    /**\n     * @param {boolean} [force] Commit transaction with all savepoints.\n     * @return {Rx.Observable<RxPool>}\n     * @throws {RxPoolError}\n     */\n    commit(force) {\n        if (!this._tclientSource) {\n            throw new RxPoolError('Client with open transaction does not exists');\n        }\n        // todo release when tlevel = 0\n        return this._tclientSource.flatMap(rxClient => rxClient.commit(force))\n            .do(rxClient => {\n                if (!rxClient.tlevel) {\n                    rxClient.release();\n                    this._tclientSource = null;\n                }\n            });\n    }\n\n    /**\n     * @param {boolean} [force] Rollback transaction with all savepoints.\n     * @return {Rx.Observable<RxPool>}\n     * @throws {RxPoolError}\n     */\n    rollback(force) {\n        if (!this._tclientSource) {\n            throw new RxPoolError('Client with open transaction does not exists');\n        }\n        // todo release when tlevel = 0\n        return this._tclientSource.flatMap(\n            rxClient => rxClient.rollback(force),\n            () => this\n        );\n        ;\n    }\n}\n"]}