{"version":3,"sources":["../../src/adapters/RxPool.js"],"names":["util","RxPool","pool","Pool","_pool","Observable","fromPromise","connect","map","rxClient","client","release","err","log","do","end","queryText","values","query"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,I;;;;;;;;AAEZ;;;IAGqBC,M;AACjB;;;AAGA,oBAAYC,IAAZ,EAAkB;AAAA;;AACd,YAAI,EAAEA,gBAAgB,aAAGC,IAArB,CAAJ,EAAgC;AAC5B,kBAAM,wBAAgB,qCAAhB,CAAN;AACH;;AAED;;;;AAIA,aAAKC,KAAL,GAAaF,IAAb;AACH;;AAED;;;;;;;;;AAOA;;;kCAGU;AACN,mBAAO,eAAGG,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWG,OAAX,EAA1B,EACFC,GADE,CACE,kBAAU;AACX,oBAAMC,WAAW,uBAAaC,MAAb,CAAjB;;AAEAD,yBAASE,OAAT,GAAmB,UAAUC,GAAV,EAAe;AAC9BZ,yBAAKa,GAAL,CAAS,mBAAT;;AAEA,2BAAOJ,SAASE,OAAhB;AACAD,2BAAOC,OAAP,CAAeC,GAAf;AACH,iBALD;;AAOA,uBAAOH,QAAP;AACH,aAZE,EAaFK,EAbE,CAaC;AAAA,uBAAMd,KAAKa,GAAL,CAAS,0BAAT,CAAN;AAAA,aAbD,CAAP;AAcH;;AAED;;;;;;+BAGO;AACH,mBAAO,KAAKN,OAAL,EAAP;AACH;;AAED;;;;;;8BAGM;AAAA;;AACF,mBAAO,eAAGF,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWW,GAAX,EAA1B,EACFP,GADE,CACE;AAAA;AAAA,aADF,EAEFM,EAFE,CAEC;AAAA,uBAAMd,KAAKa,GAAL,CAAS,oBAAT,CAAN;AAAA,aAFD,CAAP;AAGH;;AAED;;;;;;;;8BAKMG,S,EAAWC,M,EAAQ;AACrB,mBAAO,eAAGZ,UAAH,CAAcC,WAAd,CAA0B,KAAKF,KAAL,CAAWc,KAAX,CAAiBF,SAAjB,EAA4BC,MAA5B,CAA1B,EACFH,EADE,CACC;AAAA,uBAAMd,KAAKa,GAAL,CAAS,wBAAT,CAAN;AAAA,aADD,CAAP;AAEH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;4BArGW;AACP,mBAAO,KAAKT,KAAZ;AACH;;;;;;kBArBgBH,M","file":"RxPool.js","sourcesContent":["import pg from 'pg';\nimport Rx from 'rxjs';\nimport RxClient from './RxClient';\nimport { RxPoolError } from '../errors';\nimport * as util from '../util';\n\n/**\n * Standalone RxJs adapter for `pg.Pool`.\n */\nexport default class RxPool {\n    /**\n     * @param {Pool} pool\n     */\n    constructor(pool) {\n        if (!(pool instanceof pg.Pool)) {\n            throw new RxPoolError('Pool must be instance of Pool class');\n        }\n\n        /**\n         * @type {Pool}\n         * @private\n         */\n        this._pool = pool;\n    }\n\n    /**\n     * @return {Pool}\n     */\n    get pool() {\n        return this._pool;\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    connect() {\n        return Rx.Observable.fromPromise(this._pool.connect())\n            .map(client => {\n                const rxClient = new RxClient(client);\n\n                rxClient.release = function (err) {\n                    util.log('RxClient: release');\n\n                    delete rxClient.release;\n                    client.release(err);\n                };\n\n                return rxClient;\n            })\n            .do(() => util.log('RxPool: client connected'));\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    take() {\n        return this.connect();\n    }\n\n    /**\n     * @return {Observable<RxPool>}\n     */\n    end() {\n        return Rx.Observable.fromPromise(this._pool.end())\n            .map(() => this)\n            .do(() => util.log('RxPool: pool ended'));\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Rx.Observable<Object>}\n     */\n    query(queryText, values) {\n        return Rx.Observable.fromPromise(this._pool.query(queryText, values))\n            .do(() => util.log('RxPool: query executed'));\n    }\n\n    // /**\n    //  * @return {Rx.Observable<RxPool>}\n    //  */\n    // begin() {\n    //     this._tclientSource = (this._tclientSource || this.connect())\n    //         .flatMap(rxClient => rxClient.begin())\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Commit transaction with all savepoints.\n    //  * @return {Rx.Observable<RxPool>}\n    //  * @throws {RxPoolError}\n    //  */\n    // commit(force) {\n    //     if (!this._tclientSource) {\n    //         throw new RxPoolError('Client with open transaction does not exists');\n    //     }\n    //\n    //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.commit(force))\n    //         .do(rxClient => {\n    //             if (rxClient.tlevel === 0) {\n    //                 this._tclientSource = undefined;\n    //             }\n    //         })\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Rollback transaction with all savepoints.\n    //  * @return {Rx.Observable<RxPool>}\n    //  * @throws {RxPoolError}\n    //  */\n    // rollback(force) {\n    //     if (!this._tclientSource) {\n    //         throw new RxPoolError('Client with open transaction does not exists');\n    //     }\n    //\n    //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.rollback(force))\n    //         .do(rxClient => {\n    //             if (rxClient.tlevel === 0) {\n    //                 this._tclientSource = undefined;\n    //             }\n    //         })\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n}\n"]}