{"version":3,"sources":["../../src/adapters/RxPool.js"],"names":["util","RxPool","pool","Pool","_pool","autoRelease","Observable","fromPromise","connect","flatMap","using","client","of","rxClient","do","log","end","map","queryText","values","query"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;IAAYA,I;;;;;;;;AAEZ;;;IAGqBC,M;AACjB;;;AAGA,oBAAYC,IAAZ,EAAkB;AAAA;;AACd,YAAI,EAAEA,gBAAgB,aAAGC,IAArB,CAAJ,EAAgC;AAC5B,kBAAM,wBAAgB,qCAAhB,CAAN;AACH;;AAED;;;;AAIA,aAAKC,KAAL,GAAaF,IAAb;AACH;;AAED;;;;;;;;;AAOA;;;;kCAI6B;AAAA,gBAArBG,WAAqB,uEAAP,KAAO;AAAE;AAC3B,mBAAO,eAAGC,UAAH,CAAcC,WAAd,CAA0B,KAAKH,KAAL,CAAWI,OAAX,EAA1B,EACFC,OADE,CAEC;AAAA,uBAAUJ,cACA,eAAGC,UAAH,CAAcI,KAAd,CACI;AAAA,2BAAM,uBAAaC,MAAb,CAAN;AAAA,iBADJ,EAEI;AAAA,2BAAY,eAAGL,UAAH,CAAcM,EAAd,CAAiBC,QAAjB,CAAZ;AAAA,iBAFJ,CADA,GAKA,eAAGP,UAAH,CAAcM,EAAd,CAAiB,uBAAaD,MAAb,CAAjB,CALV;AAAA,aAFD,EASFG,EATE,CASC;AAAA,uBAAMd,KAAKe,GAAL,CAAS,0BAAT,CAAN;AAAA,aATD,CAAP;AAUH;;AAED;;;;;;+BAGO;AACH,mBAAO,KAAKP,OAAL,EAAP;AACH;;AAED;;;;;;8BAGM;AAAA;;AACF,mBAAO,eAAGF,UAAH,CAAcC,WAAd,CAA0B,KAAKH,KAAL,CAAWY,GAAX,EAA1B,EACFC,GADE,CACE;AAAA;AAAA,aADF,EAEFH,EAFE,CAEC;AAAA,uBAAMd,KAAKe,GAAL,CAAS,oBAAT,CAAN;AAAA,aAFD,CAAP;AAGH;;AAED;;;;;;;;8BAKMG,S,EAAWC,M,EAAQ;AACrB,mBAAO,KAAKX,OAAL,GACFC,OADE,CACM;AAAA,uBAAYI,SAASO,KAAT,CAAeF,SAAf,EAA0BC,MAA1B,CAAZ;AAAA,aADN,CAAP;AAEH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;4BAlGW;AACP,mBAAO,KAAKf,KAAZ;AACH;;;;;;kBArBgBH,M","file":"RxPool.js","sourcesContent":["import pg from 'pg';\nimport Rx from 'rxjs';\nimport RxClient from './RxClient';\nimport { RxPoolError } from '../errors';\nimport * as util from '../util';\n\n/**\n * Standalone RxJs adapter for `pg.Pool`.\n */\nexport default class RxPool {\n    /**\n     * @param {Pool} pool\n     */\n    constructor(pool) {\n        if (!(pool instanceof pg.Pool)) {\n            throw new RxPoolError('Pool must be instance of Pool class');\n        }\n\n        /**\n         * @type {Pool}\n         * @private\n         */\n        this._pool = pool;\n    }\n\n    /**\n     * @return {Pool}\n     */\n    get pool() {\n        return this._pool;\n    }\n\n    /**\n     * @param {boolean} [autoRelease=true] Wrap client as `Rx.Disposable` resource\n     * @return {Observable<RxClient>}\n     */\n    connect(autoRelease = false) { // todo change on true later\n        return Rx.Observable.fromPromise(this._pool.connect())\n            .flatMap(\n                client => autoRelease ?\n                          Rx.Observable.using(\n                              () => new RxClient(client),\n                              rxClient => Rx.Observable.of(rxClient)\n                          ) :\n                          Rx.Observable.of(new RxClient(client))\n            )\n            .do(() => util.log('RxPool: client connected'));\n    }\n\n    /**\n     * @return {Observable<RxClient>}\n     */\n    take() {\n        return this.connect();\n    }\n\n    /**\n     * @return {Observable<RxPool>}\n     */\n    end() {\n        return Rx.Observable.fromPromise(this._pool.end())\n            .map(() => this)\n            .do(() => util.log('RxPool: pool ended'));\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Rx.Observable<Object>}\n     */\n    query(queryText, values) {\n        return this.connect()\n            .flatMap(rxClient => rxClient.query(queryText, values));\n    }\n\n    // /**\n    //  * @return {Rx.Observable<RxPool>}\n    //  */\n    // begin() {\n    //     this._tclientSource = (this._tclientSource || this.connect())\n    //         .flatMap(rxClient => rxClient.begin())\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Commit transaction with all savepoints.\n    //  * @return {Rx.Observable<RxPool>}\n    //  * @throws {RxPoolError}\n    //  */\n    // commit(force) {\n    //     if (!this._tclientSource) {\n    //         throw new RxPoolError('Client with open transaction does not exists');\n    //     }\n    //\n    //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.commit(force))\n    //         .do(rxClient => {\n    //             if (rxClient.tlevel === 0) {\n    //                 this._tclientSource = undefined;\n    //             }\n    //         })\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n    //\n    // /**\n    //  * @param {boolean} [force] Rollback transaction with all savepoints.\n    //  * @return {Rx.Observable<RxPool>}\n    //  * @throws {RxPoolError}\n    //  */\n    // rollback(force) {\n    //     if (!this._tclientSource) {\n    //         throw new RxPoolError('Client with open transaction does not exists');\n    //     }\n    //\n    //     this._tclientSource = this._tclientSource.flatMap(rxClient => rxClient.rollback(force))\n    //         .do(rxClient => {\n    //             if (rxClient.tlevel === 0) {\n    //                 this._tclientSource = undefined;\n    //             }\n    //         })\n    //         .shareReplay(1);\n    //\n    //     return this._tclientSource.map(() => this);\n    // }\n}\n"]}