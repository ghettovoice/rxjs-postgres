{"version":3,"sources":["../../src/adapters/RxPool.js"],"names":["Rx","RxPool","pool","_pool","_tclient","undefined","Observable","fromPromise","connect","map","client","end","queryText","values","query","_obs","doOnNext","console","log","rxClient","shareReplay","flatMap","begin","force","commit","rollback"],"mappings":";;;;;;;;AAAA;;AACA;;IAAYA,E;;AACZ;;;;AACA;;;;;;;;AAEA;;;IAGqBC,M;AACjB;;;AAGA,oBAAYC,IAAZ,EAAkB;AAAA;;AACd;AACA,YAAI,EAAE,gBAAgBD,MAAlB,CAAJ,EAA+B;AAC3B,mBAAO,IAAIA,MAAJ,CAAWC,IAAX,CAAP;AACH;;AAED,YAAI,EAAEA,wBAAF,CAAJ,EAA6B;AACzB,kBAAM,wBAAgB,wCAAhB,CAAN;AACH;;AAED,aAAKC,KAAL,GAAaD,IAAb;AACA,aAAKE,QAAL,GAAgBC,SAAhB;AACH;;;;;;AAUD;;;kCAGU;AACN,mBAAOL,GAAGM,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWK,OAAX,EAA1B,EAAgDC,GAAhD,CAAoD;AAAA,uBAAU,uBAAaC,MAAb,CAAV;AAAA,aAApD,CAAP;AACH;;AAED;;;;;;+BAGO;AACH,mBAAO,KAAKF,OAAL,EAAP;AACH;;AAED;;;;;;8BAGM;AAAA;;AACF,mBAAOR,GAAGM,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWQ,GAAX,EAA1B,EAA4CF,GAA5C,CAAgD;AAAA;AAAA,aAAhD,CAAP;AACH;;AAED;;;;;;;;8BAKMG,S,EAAWC,M,EAAQ;AACrB,mBAAOb,GAAGM,UAAH,CAAcC,WAAd,CAA0B,KAAKJ,KAAL,CAAWW,KAAX,CAAiBF,SAAjB,EAA4BC,MAA5B,CAA1B,CAAP;AACH;;AAED;;;;;;gCAGQ;AAAA;;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAKE,IAAL,GAAY,KAAKA,IAAL,IAAa,KAAKP,OAAL,GAAeQ,QAAf,CAAwB;AAAA,uBAAaC,QAAQC,GAAR,CAAY,CAAZ,GAAgB,OAAKd,QAAL,GAAgBe,QAA7C;AAAA,aAAxB,EAAgFC,WAAhF,CAA4F,CAA5F,CAAzB;;AAEA,mBAAO,KAAKL,IAAL,CAAUM,OAAV,CAAkB;AAAA,uBAAYF,SAASG,KAAT,EAAZ;AAAA,aAAlB,EAAgDb,GAAhD,CAAoD;AAAA;AAAA,aAApD,CAAP;AACH;;AAED;;;;;;;;+BAKOc,K,EAAO;AAAA;;AACV,gBAAI,CAAC,KAAKnB,QAAV,EAAoB;AAChB,sBAAM,wBAAgB,8CAAhB,CAAN;AACH;;AAED,mBAAO,KAAKA,QAAL,CAAcoB,MAAd,CAAqBD,KAArB,EAA4Bd,GAA5B,CAAgC;AAAA;AAAA,aAAhC,CAAP;AACH;;AAED;;;;;;;;iCAKSc,K,EAAO;AAAA;;AACZ,gBAAI,CAAC,KAAKnB,QAAV,EAAoB;AAChB,sBAAM,wBAAgB,8CAAhB,CAAN;AACH;;AAED,mBAAO,KAAKA,QAAL,CAAcqB,QAAd,CAAuBF,KAAvB,EAA8Bd,GAA9B,CAAkC;AAAA;AAAA,aAAlC,CAAP;AACH;;;4BA9EU;AACP,mBAAO,KAAKN,KAAZ;AACH;;;4BAEa;AACV,mBAAO,KAAKC,QAAZ;AACH;;;;;;kBAxBgBH,M","file":"RxPool.js","sourcesContent":["import { Pool } from 'pg';\nimport * as Rx from \"rx\";\nimport RxClient from \"./RxClient\";\nimport { RxPoolError } from \"../errors\";\n\n/**\n * Standalone RxJs adapter for `pg.Pool`.\n */\nexport default class RxPool {\n    /**\n     * @param {Pool} pool\n     */\n    constructor(pool) {\n        /* istanbul ignore if */\n        if (!(this instanceof RxPool)) {\n            return new RxPool(pool);\n        }\n\n        if (!(pool instanceof Pool)) {\n            throw new RxPoolError('Pool must be instance of pg.Pool class');\n        }\n\n        this._pool = pool;\n        this._tclient = undefined;\n    }\n\n    get pool() {\n        return this._pool;\n    }\n\n    get tclient() {\n        return this._tclient;\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    connect() {\n        return Rx.Observable.fromPromise(this._pool.connect()).map(client => new RxClient(client));\n    }\n\n    /**\n     * @return {Rx.Observable<RxClient>}\n     */\n    take() {\n        return this.connect();\n    }\n\n    /**\n     * @return {Rx.Observable<RxPool>}\n     */\n    end() {\n        return Rx.Observable.fromPromise(this._pool.end()).map(() => this);\n    }\n\n    /**\n     * @param {string} queryText\n     * @param {Array} [values]\n     * @return {Rx.Observable<Object>}\n     */\n    query(queryText, values) {\n        return Rx.Observable.fromPromise(this._pool.query(queryText, values));\n    }\n\n    /**\n     * @return {Rx.Observable<RxPool>}\n     */\n    begin() {\n        // const observable = this._tclient ?\n        //                    Rx.Observable.return<RxClient>(this._tclient) :\n        //                    this.connect().doOnNext((rxClient : RxClient) => this._tclient = rxClient);\n        //\n        // return observable.flatMap<RxClient>((rxClient : RxClient) => rxClient.begin())\n        //     .map<RxPool>(() => this);\n        // todo test test test\n        this._obs = this._obs || this.connect().doOnNext(rxClient => (console.log(1), this._tclient = rxClient)).shareReplay(1);\n\n        return this._obs.flatMap(rxClient => rxClient.begin()).map(() => this);\n    }\n\n    /**\n     * @param {boolean} [force] Commit transaction with all savepoints.\n     * @return {Rx.Observable<RxPool>}\n     * @throws {RxPoolError}\n     */\n    commit(force) {\n        if (!this._tclient) {\n            throw new RxPoolError('Client with open transaction does not exists');\n        }\n\n        return this._tclient.commit(force).map(() => this);\n    }\n\n    /**\n     * @param {boolean} [force] Rollback transaction with all savepoints.\n     * @return {Rx.Observable<RxPool>}\n     * @throws {RxPoolError}\n     */\n    rollback(force) {\n        if (!this._tclient) {\n            throw new RxPoolError('Client with open transaction does not exists');\n        }\n\n        return this._tclient.rollback(force).map(() => this);\n    }\n}\n"]}